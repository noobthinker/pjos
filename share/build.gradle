apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        buildConfigField "String","APIHOST","\"${api_host}\""
        buildConfigField "String","SocketHost","\"${socket_host}\""
        buildConfigField "Integer","SocketPort","${socket_port}"
        buildConfigField "String", "PROJECTCODE", "\"${app_code}\""
        buildConfigField "String", "APIVERSION", "\"${api_version}\""
        buildConfigField "Boolean", "NETWORKON","${network_on}"
        buildConfigField "String", "Socket","\"${socket_type}\""
        buildConfigField "Boolean", "PropInitOneTime","${onetime_init}"
        buildConfigField "Integer","captchaTimeOut","${captcha_time}"


        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        staging {
            initWith debug

            // Specifies a sorted list of fallback build types that the
            // plugin should try to use when a dependency does not include a
            // "staging" build type.
            // Used with :test-shared, which doesn't have a staging variant.
            matchingFallbacks = ['debug']
        }
    }

}

dependencies {

    api project(":model")

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.appcompat:appcompat:$rootProject.appcompatVersion"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // Architecture Components
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$rootProject.lifecycleVersion"

    // Utils
    api "com.jakewharton.timber:timber:$rootProject.timberVersion"
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"

    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttpVersion"

    implementation "io.netty:netty-all:$rootProject.nettyVersion"
    implementation "com.google.protobuf:protobuf-java:$rootProject.protobufVersion"

    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"

    // Dagger
    implementation "com.google.dagger:dagger-android:$rootProject.dagger"
    implementation "com.google.dagger:dagger-android-support:$rootProject.dagger"
    kapt "com.google.dagger:dagger-compiler:$rootProject.dagger"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.dagger"

// ThreeTenBP for the shared module only. Date and time API for Java.
    testImplementation "org.threeten:threetenbp:$rootProject.threetenbpVersion"
    compileOnly "org.threeten:threetenbp:$rootProject.threetenbpVersion:no-tzdb"

    implementation "com.fasterxml.jackson.core:jackson-databind:$rootProject.jackson"
    implementation "com.fasterxml.jackson.core:jackson-core:$rootProject.jackson"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$rootProject.jackson"

    // unit tests livedata
    testImplementation "androidx.arch.core:core-testing:$rootProject.lifecycleVersion"

}

